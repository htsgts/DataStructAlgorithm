# part3_import.py
# 다른 파일에서 그 파일에 작성된
# 프로그래밍 요소를 가져오려면
# from 모듈 import 요소
# 와 같이 작성해야 한다.
# + 해당 모듈의 모든 요소를 가져오려면
# import 모듈
# 위와 같이 작성할 수도 있다.
# 모듈을 가져올 때에는 해당 모듈과
# 현재 파일의 상대적인 경로를 입력해주어야 한다.

# 같은 폴더 안에 있으면 파일/폴더 이름만으로
# 가지고 올 수 있다.
from person import Person

if __name__ == "__main__":
    kim = Person("김유신", 32, "서울역")
    kim.print_info()
    # print(path) # person.py 파일에서
    # Person 클래스만 가져왔기 때문에
    # person.py 파일의 전역변수 요소인 path는
    # 가져오지 못했다.
    import person # 해당 파일의 모든 프로그래밍 요소를
    # 가져오기 때문에
    # path라는 변수도 가져올 수 있다.
    # 이때, 이 파일에서 만든 것이 아니기 때문에
    # 해당 모듈의 이름을 하위접근연산자(.)를 통해 적어주어야 한다.
    print(person.path) # "C:/"
    
    from person import (path,
                        Person) # 여러 요소를 명시적으로 들고오려면
    # 반점,을 이용해 구분해 주어야 한다.
    # 만약 가져오는 요소의 이름을 바꾸고 싶다면(이름 충돌방지)
    # as라는 예약어를 통해서 가져오는 프로그래밍 요소의 이름을 변경할 수 있다.
    from person import path as root_path # Alias 별칭
    print(root_path)
    # 별칭 alias를 쓰는 이유
    # 1. 현재 파일에서 쓰는 이름과 충돌을 방지하기 위해서
    # 2. 너무 긴 이름을 줄여서 쓰기 위해서
    # 3. 관례적으로 줄여쓰는 이름을 사용하여 일관성을 지키기 위해서

    # 다른 파일에서 내용을 가져오는 경우,
    # 모든 요소를 하나하나 입력하기가 힘들 수 있다.
    # 이때 와일드카드*를 사용하면 모든 요소를 가리킬 수 있게 된다.
    from person import * # 모든 요소를 이름 그대로 가져온다.
    # 다만 이렇게 가져오는 경우, 정확히 어떤 변수나 함수, 클래스를 가져오는지
    # 명시적으로 작성되지 않기 때문에
    # 실제로는 자주 쓰이지 않는다. 권장하지 않는다.