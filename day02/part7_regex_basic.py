# part7_regex_basic.py
# 정규표현식(Regular Expressions)
# 정규표현식이란, 문자열 패턴을 특정한 문법으로 표현하여
# 해당되는 부분 문자열을 찾거나, 추출하거나, 대체하는 등
# 문자열 처리를 위해 여러 언어에서 범용적으로 사용되는
# 툴을 가리킨다.

# 파이썬에서 정규표현식을 사용하려면 re를 import해야 한다.
import re

def regex_basic():
  # 찾는 등의 패턴을 컴파일해야 한다.
  # 문자열의 시작은 ^로 나타낸다.
  # 문자열의 끝 $
  # 앞의 요소의 반복
    # 0번이상 반복 *
    # 1번이상 반복 +
    # 0번 혹은 1번 ?
    # 중괄호{} 안에 숫자 하나를 넣으면 정확하게 그 횟수만큼 반복을 의미한다.
    # 중괄호 안에 두 개의 숫자(n, m)를 넣으면 n이상, m이하만큼 반복을 의미한다.
  # 그루핑(grouping)
  # 소괄호 안에 내용을 넣으면 소괄호를 하나로 묶어 취급한다.
  # 문자열 클래스
    # 대괄호[] 안에 찾고자 하는 문자를 넣으면
    # 그 중 하나를 가리키는 방식이다.
  
  reg_text = r"[a-z]{2,3}"
  pattern = re.compile(reg_text)
  result = pattern.findall("hello h world")
  print(result)

# 전화번호 형식에서 전화번호 숫자만 추출하는 함수
def find_telephone_number(text:str):
  # 010-1234-5678
  # 01012345678
  # 010 1234 5678
  # 전화번호를 추출할 패턴 입력
  # ^[\d]{3} -> 숫자가 정확히 3번 반복됨을 가리킨다. -> 010
  # ([^0-9]+)? -> 숫자가 아닌 문자나 기호가 1번이상 등장할 수도(1) 등장하지 않을 수도(0) 있다.
  # -, 공백문자, 빈문자열
  # [0-9]{4} -> 숫자가 4번 반복됨을 가리킴 -> 1234
  # 마지막의 $는 문자열의 끝을 가리킨다.
  # 캡처그룹() 안의 ?:은 캡처를 하지 않음을 가리킨다.
  reg_text = r"^([\d]{3})(?:[^0-9]+)?([0-9]{4})(?:[^0-9]+)?([0-9]{4})$"
  # 패턴을 컴파일
  pattern = re.compile(reg_text)
  # 컴파일된 패턴을 전달받은 텍스트에 적용하여 결과값 반환
  result = pattern.findall(text) # 캡처그룹만 리스트 형태로 반환
  # 반환받은 결과값을 함수 밖으로 반환
  
  return result # '010', '1234', '5678'

if __name__ == "__main__":
  # regex_basic()
  result = find_telephone_number("010?1234*5678")
  print(result)